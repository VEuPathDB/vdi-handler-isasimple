#!/usr/bin/perl
use DBI;
use JSON qw( decode_json );
use strict;

my @envVars = ('DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_PLATFORM', 'DB_USER', 'DB_PASS', 'DB_SCHEMA', 'DATA_FILES');

my ($userDatasetId) = @ARGV;

usage() unless scalar(@ARGV) == 1;

sub usage {

  my $envStr = '$' . join(", \$", @envVars);

  die "
Uninstall an IsaSimple user dataset into the VDI dataset schema.

Usage: install-data vdi_dataset_id

Where:
  vdi_dataset_id:  a vdi user dataset id

Env: $envStr

";
}

for my $envVar (@envVars) { die "Missing env variable '$envVar'\n" unless $ENV{$envVar}; }

my $dbh = DBI->connect("dbi:$ENV{DB_PLATFORM}://$ENV{DB_HOST}:$ENV{DB_PORT}/$ENV{DB_NAME}", $ENV{DB_USER}, $ENV{DB_PASS})
    || die "Couldn't connect to database: " . DBI->errstr;
$dbh->{RaiseError} = 1;
$dbh->{AutoCommit} = 1;

my $datasetDir = "$ENV{DATA_FILES}/$userDatasetId";
my $schema = $ENV{DB_SCHEMA};

my $installJsonFile = "$datasetDir/install.json";

# check if already uninstalled
if (!(-e $installJsonFile)) {
  my $sql = "select count(*) from $schema.study where user_dataset_id = '$userDatasetId'";
  my $sth = $dbh->prepare($sql);
  $sth->execute();
  my ($studyRowPresent) = $sth->fetchrow_array;  # uh oh... no install.json but not removed fully from db
  die "Missing file $datasetDir/install.json.  Cannot uninstall\n" if ($studyRowPresent);
  print STDERR "Dataset not present.  Nothing to uninstall\n";
  exit 0;
}

# parse json file containing table/index/view configurations
open my $fh, '<', $installJsonFile or die "error opening $installJsonFile: $!";
my $jsonString = do { local $/; <$fh> };
my $configsArray = decode_json($jsonString);

# drop views
foreach my $config (@$configsArray) {
  next if $config->{type} ne 'view';
  dropTableOrView($dbh, 'view', "$schema.$config->{name}");
}

# drop tables
foreach my $config (@$configsArray) {
  next if $config->{type} ne 'table' || $config->{is_preexisting_table} ;
  dropTableOrView($dbh, 'table', "$schema.$config->{name}");
}

# delete rows from shared tables
my $sql = "
delete from $schema.entitytypegraph 
where study_stable_id in (
 select stable_id from $schema.study where user_dataset_id = '$userDatasetId'
)";
print STDERR "RUNNING SQL: $sql\n\n";
$dbh->do($sql) || die "Failed running sql: $sql\n";

$sql = "delete from $schema.study where user_dataset_id = '$userDatasetId'";
print STDERR "RUNNING SQL: $sql\n\n";
$dbh->do($sql) || die "Failed running sql: $sql\n";

# finally, remove UD data dir.  leave this for last, to retain install.json if there are any errors
unlink("$datasetDir/install.json") || die "Can't remove file '$datasetDir/install.json'\n";
rmdir($datasetDir) || die "Can't remove UD dir '$datasetDir'\n";

#################################################################################################

sub dropTableOrView {
  my ($dbh, $tableOrView, $thing) = @_;

  if ($ENV{DB_PLATFORM} eq 'Oracle') {
    $dbh->{RaiseError} = 0; $dbh->{PrintError} = 0;
    my $sql = "drop $tableOrView $thing";
    print STDERR "RUNNING SQL: $sql\n\n";
    my $status = $dbh->do($sql);
    # ignore error that table or view does not exist (ORA-00942) 
    die "Error trying to drop $tableOrView $thing " . $DBI::errstr unless ($status || $DBI::errstr =~ /ORA-00942/);
    $dbh->{RaiseError} = 1; $dbh->{PrintError} = 1;
  } else {
    my $sql = "drop $tableOrView if exists $thing";  # pg offers the sensible thing
    print STDERR "RUNNING SQL: $sql\n\n";
    $dbh->do($sql);
  }
}

