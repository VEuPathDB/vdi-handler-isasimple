#!/usr/bin/perl

use strict;
use warnings;
use File::Basename;
use Text::CSV;
use Data::Dumper;
use File::Copy;

my $MAXCOLS = 999;
my $MAXLENGTH = 1000;
my $VALIDATION_ERR_CODE = 99;

my @validExtensions = ('.txt', '.tsv', '.csv');

sub usage {
    die "
Usage: import input_dir

Validate an ISA Simple dataset for import.

input_dir: must contain the original dataset files, and no other files.

If there is a validation error, exit with status $VALIDATION_ERR_CODE.  STDOUT will contain the user-appropriate validation error message

Validator tests for:
 - Supported file format / extension
 - File exists
 - Can be parsed by Perl package Text::CSV
 - Minimum number of columns
   - failure may indicate parse error, e.g. extention:delimiter mismatch
 - Minimum number of rows
";
}

usage() unless scalar(@ARGV) == 1;

my ($inputDir) = @ARGV;

opendir($dh, $inputDir) or die "can't open dir '$inputDir'\n";;
my @files = readdir($dh);
die "inputDir '$inputDir' is empty)" unless scalar(@files) > 2;

my $results = {};

foreach my $filename (@files) {
  next if $filename =~ /\.$/; # skip . and ..
  unless ($filename =~ /.*(\.\w\w\w)$/ && grep(lc($1), @validExtensions)) {
    trackValidationError($filename, "Invalid file format.  Must have extension a valid extension: " . join(", ", @validExtensions));
    next;
  }
  my $extension = lc($1);
  my $delim = $extension eq '.csv'? "," : "\t";
  my $filepath = "$inputDir/$filename";

  unless( -e $filepath ){
    trackValidationError($filepath, "File not found");
    next;
  }

  unless( -f $filepath ){
    trackValidationError($filename, "File not a plain file (may be link, pipe, directory, etc.)");
    next;
  }

  if(-B $filepath){
    trackValidationError($filename, "Binary file; only text is supported");
    next;
  }

  my $ifh;
  open($ifh, "<$filepath") || die "Cannot read file '$filepath' : $!\n";

  my $csv = Text::CSV->new({binary => 1, sep_char => $delim, quote_char => '"' });

  unless ($csv) {
    trackValidationError($filename, "Invalid file " . Text::CSV->error_diag ());
    close($ifh);
    next;
  }

  my $headers = $csv->getline( $ifh );
  unless($headers) {
    trackValidationError($filename, "unreadable, possibly not a plain text file");
    close($ifh);
    next;
  }

  if(@$headers < 2 ) { ## check headers
    trackValidationError($filename, "Header has only one column.  Check file format and delimiter");
    close($ifh);
    next;
  }
  if(@$headers > $MAXCOLS ){ ## check headers
    my $numcols = scalar @$headers;
    trackValidationError($filename, "Too many columns ($numcols), limit is $MAXCOLS columns");
    close($ifh);
    next;
  }

  my $lines = 0;
  my %maxlen;
  eval {
    while(my $row = $csv->getline( $ifh )) {
      $lines++;
      if (scalar(@$row) != scalar(@$headers)) {
	trackValidationError($filename, "Row $lines has incorrect number of columns");
	last;
      }
      foreach my $col (@$headers){
        my $len = length( shift(@$row) );
        $maxlen{$col} ||= $len;
        if($len > $MAXLENGTH){ 
          $maxlen{$col} = $len;
        }
      }
    }
  };
  close($ifh);

  unless($lines){ ## Text::CSV threw an error
    trackValidationError($filename, "Empty (no data rows)");
  }
  else {
    foreach my $col (@$headers){
      if($maxlen{$col} > $MAXLENGTH){
        trackValidationError($filename, "Column \"$col\" values have a maximum length of $maxlen{$col} characters, limit is $MAXLENGTH");
      }
    }
  }
}

my $invalidCount = 0;
while( my ($filename, $failures) = each %{$results}){
  foreach my $message (@$failures){
    printf STDOUT ("%s\t%s\n", $filename, $message);
    $invalidCount++;
  }
}

exit $VALIDATION_ERR_CODE if ($invalidCount > 0);


sub trackValidationError {
  my ($filename, $message) = @_;
  $results->{$filename} //= [];
  push( @{ $results->{$filename} }, $message );
}
